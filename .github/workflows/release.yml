name: Create Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install UV
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync

      - name: Run tests
        run: uv run pytest

      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Verify version matches pyproject.toml
        run: |
          PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          TAG_VERSION="${{ steps.version.outputs.version }}"
          if [ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]; then
            echo "Version mismatch: pyproject.toml=$PYPROJECT_VERSION, tag=$TAG_VERSION"
            exit 1
          fi
          echo "Version verified: $PYPROJECT_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
            git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            git log --pretty=format:"* %s (%h)" >> CHANGELOG.md
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create distribution archive
        run: |
          mkdir -p dist
          tar -czf dist/discordbot-v${{ steps.version.outputs.version }}.tar.gz \
            --exclude='.git*' \
            --exclude='dist' \
            --exclude='.pytest_cache' \
            --exclude='__pycache__' \
            --exclude='.env' \
            .

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release v${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            dist/discordbot-v${{ steps.version.outputs.version }}.tar.gz
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image (Optional)
        if: false  # Set to true if you want Docker image publishing
        run: |
          echo "Docker build would go here"
          # docker build -t discordbot:v${{ steps.version.outputs.version }} .
          # docker push discordbot:v${{ steps.version.outputs.version }}